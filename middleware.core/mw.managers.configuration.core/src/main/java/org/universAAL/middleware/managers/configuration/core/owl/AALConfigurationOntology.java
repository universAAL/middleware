/*******************************************************************************
 * Copyright 2014 Universidad Polit√©cnica de Madrid
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.universAAL.middleware.managers.configuration.core.owl;

import org.universAAL.middleware.owl.DataRepOntology;
import org.universAAL.middleware.owl.ManagedIndividual;
import org.universAAL.middleware.owl.MergedRestriction;
import org.universAAL.middleware.owl.OntClassInfoSetup;
import org.universAAL.middleware.owl.Ontology;
import org.universAAL.middleware.rdf.Resource;
import org.universAAL.middleware.rdf.ResourceFactory;
import org.universAAL.middleware.rdf.TypeMapper;
import org.universAAL.middleware.xsd.Base64Binary;

/**
 * This class provides the main representation of the aalconfigurationontologu
 * ontology for the universAAL platform.
 * 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public final class AALConfigurationOntology extends Ontology {

    public static class Factory implements ResourceFactory {

	public Resource createInstance(String classURI, String instanceURI,
		int factoryIndex) {

	    switch (factoryIndex) {
	    case 1:
		return new Entity(instanceURI);
	    case 2:
		return new ConfigurationFile(instanceURI);
	    case 3:
		return new ConfigurationParameter(instanceURI);
	    }
	    return null;
	}
    }

    private static Factory factory = new Factory();
    public static final String NAMESPACE = "http://ontology.universAAL.org/AALConfigurationOntology#";

    public AALConfigurationOntology() {
	super(NAMESPACE);
    }

    public void create() {
	Resource r = getInfo();
	r.setResourceComment("Confoguration components for the configuraiton manager");
	r.setResourceLabel("AALConfigurationOntology");
	addImport(DataRepOntology.NAMESPACE);

	// ******* Declaration of regular classes of the ontology ******* //
	OntClassInfoSetup oci_Entity = createNewOntClassInfo(Entity.MY_URI,
		factory, 1);
	OntClassInfoSetup oci_ConfigurationFile = createNewOntClassInfo(
		ConfigurationFile.MY_URI, factory, 2);
	OntClassInfoSetup oci_ConfigurationParameter = createNewOntClassInfo(
		ConfigurationParameter.MY_URI, factory, 3);

	// ******* Add content to regular classes of the ontology ******* //

	oci_Entity.setResourceComment("Configurable Entity");
	oci_Entity.setResourceLabel("Entity");
	oci_Entity.addSuperClass(ManagedIndividual.MY_URI);
	oci_Entity.addDatatypeProperty(Entity.PROP_VERSION).setFunctional();
	oci_Entity.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(Entity.PROP_VERSION,
			TypeMapper.getDatatypeURI(Long.class), 1, 1));

	oci_ConfigurationFile
		.setResourceComment("An entity that is represented by a file");
	oci_ConfigurationFile.setResourceLabel("ConfigurationFile");
	oci_ConfigurationFile.addSuperClass(Entity.MY_URI);
	oci_ConfigurationFile.addDatatypeProperty(
		ConfigurationFile.PROP_LOCAL_URL).setFunctional();
	oci_ConfigurationFile.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ConfigurationFile.PROP_LOCAL_URL,
			TypeMapper.getDatatypeURI(String.class), 1, 1));
	oci_ConfigurationFile.addDatatypeProperty(
		ConfigurationFile.PROP_DEFAULT_URL).setFunctional();
	oci_ConfigurationFile.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ConfigurationFile.PROP_DEFAULT_URL,
			TypeMapper.getDatatypeURI(String.class), 1, 1));
	oci_ConfigurationFile.addDatatypeProperty(
		ConfigurationFile.PROP_EXTENSION_FILTER).setFunctional();
	oci_ConfigurationFile.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ConfigurationFile.PROP_EXTENSION_FILTER,
			TypeMapper.getDatatypeURI(String.class), 1, 1));
	oci_ConfigurationFile.addDatatypeProperty(
		ConfigurationFile.PROP_CONTENT).setFunctional();
	oci_ConfigurationFile.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ConfigurationFile.PROP_CONTENT,
			TypeMapper.getDatatypeURI(Base64Binary.class), 1, 1));

	oci_ConfigurationParameter
		.setResourceComment("An entity that is represented by a Parameter");
	oci_ConfigurationParameter.setResourceLabel("ConfigurationParameter");
	oci_ConfigurationParameter.addSuperClass(Entity.MY_URI);
	oci_ConfigurationParameter.addObjectProperty(
		ConfigurationParameter.PROP_DEFAULT_VALUE).setFunctional();
	oci_ConfigurationParameter.addRestriction(MergedRestriction
		.getCardinalityRestriction(
			ConfigurationParameter.PROP_DEFAULT_VALUE, 1, 1));
	oci_ConfigurationParameter.addObjectProperty(
		ConfigurationParameter.PROP_VALUE).setFunctional();
	oci_ConfigurationParameter.addRestriction(MergedRestriction
		.getCardinalityRestriction(ConfigurationParameter.PROP_VALUE,
			1, 1));

    }
}
