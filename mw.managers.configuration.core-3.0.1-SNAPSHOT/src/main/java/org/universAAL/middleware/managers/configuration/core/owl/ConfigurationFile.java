/*******************************************************************************
 * Copyright 2014 Universidad Polit√©cnica de Madrid
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.universAAL.middleware.managers.configuration.core.owl;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import org.universAAL.middleware.xsd.Base64Binary;



/**
 * Ontological representation of ConfigurationFile in the aalconfigurationontologu ontology. 
 * Methods included in this class are the mandatory ones for representing an
 * ontological concept in Java classes for the universAAL platform. In addition
 * getters and setters for properties are included.
 * 
 * @author 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class ConfigurationFile extends Entity {
  public static final String MY_URI = AALConfigurationOntology.NAMESPACE
    + "ConfigurationFile";
  public static final String PROP_LOCAL_URL = AALConfigurationOntology.NAMESPACE
    + "localURL";
  public static final String PROP_DEFAULT_URL = AALConfigurationOntology.NAMESPACE
    + "defaultURL";
  public static final String PROP_CONTENT = AALConfigurationOntology.NAMESPACE
    + "content";
public static final String PROP_EXTENSION_FILTER = AALConfigurationOntology.NAMESPACE
    + "extensionFilter";


  public ConfigurationFile () {
    super();
  }
  
  public ConfigurationFile (String uri) {
    super(uri);
  }

  public String getClassURI() {
    return MY_URI;
  }
  
  public int getPropSerializationType(String propURI) {
    if (PROP_LOCAL_URL.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_DEFAULT_URL.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_CONTENT.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    return super.getPropSerializationType(propURI);
  } 

  public boolean isWellFormed() {
	return super.isWellFormed() 
      && hasProperty(PROP_LOCAL_URL)
      && hasProperty(PROP_DEFAULT_URL)
      && hasProperty(PROP_CONTENT);
  }

  public Base64Binary getContent() {
    return (Base64Binary) getProperty(PROP_CONTENT);
  }		

  public void setContent(Base64Binary newPropValue) {
      changeProperty(PROP_CONTENT, newPropValue);
  }	

  public String getDefaultURL() {
    return (String)getProperty(PROP_DEFAULT_URL);
  }		

  public void setDefaultURL(String newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_DEFAULT_URL, newPropValue);
  }		

  public String getLocalURL() {
    return (String)getProperty(PROP_LOCAL_URL);
  }		

  public void setLocalURL(String newPropValue) {
      changeProperty(PROP_LOCAL_URL, newPropValue);
  }	
  
  public String getExtensionFilter() {
      return (String)getProperty(PROP_EXTENSION_FILTER);
    }		

    public void setExtensionFilter(String newPropValue) {
      if (newPropValue != null)
        changeProperty(PROP_EXTENSION_FILTER, newPropValue);
    }

  public void loadContentFromLocalURL() throws IOException{
      loadContentFormURL(new URL(getLocalURL()));
  }
  
  public void loadContentFromDefaultURL() throws IOException{
      loadContentFormURL(new URL(getDefaultURL()));
  }
  
  public void loadContentFormURL(URL u) throws IOException{
      InputStream is = u.openStream();
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      int i;
      while((i=is.read())!=-1)
      {
	 baos.write(i);
      }
      setContent(new Base64Binary(baos.toByteArray()));
      is.close();
      baos.close();
  }
  /**
   * @param f
   * @param content
   */
  public static boolean writeContentToFile(Base64Binary content, File f) {
	//save content in a local file 
	try {
	    FileOutputStream fos = new FileOutputStream(f);
	    fos.write(content.getVal());
	    fos.close();
	} catch (Exception e1) {
	    return false;
	}
	return true;
  }
}
